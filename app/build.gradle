apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.github.zachdeibert.massscanner"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    if (!"yes".equalsIgnoreCase(System.getenv("NO_NDK"))) {
        externalNativeBuild {
            cmake {
                path file("CMakeLists.txt")
            }
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.core:core-ktx:1.2.0"
    implementation "androidx.fragment:fragment-ktx:1.2.4"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    testImplementation "junit:junit:4.12"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"
}

def nativeTestDir = new File(projectDir, "build/nativeTest")

task nativeTestEnvironment(type: Exec) {
    workingDir nativeTestDir
    commandLine "cmake", "../../src/test/c"
    standardOutput System.out
    doFirst {
        nativeTestDir.mkdirs()
    }
    outputs.upToDateWhen {
        new File(nativeTestDir, "Makefile").exists() || new File(nativeTestDir, "mass-scanner-natives-test.sln").exists()
    }
}

task nativeBuild(type: Exec) {
    workingDir nativeTestDir
    commandLine "cmake", "--build", "."
    standardOutput System.out
    dependsOn nativeTestEnvironment
}

task nativeTest(type: Exec) {
    workingDir nativeTestDir
    commandLine "cmake", "--build", ".", "--target", "check"
    standardOutput System.out
    dependsOn nativeTestEnvironment
}

task cleanNativeTest(type: Delete) {
    delete nativeTestDir
}
clean.dependsOn cleanNativeTest
